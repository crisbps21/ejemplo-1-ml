import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.inspection import PartialDependenceDisplay
from sklearn.ensemble import HistGradientBoostingRegressor

# Generación de datos para el modelo
n_samples = 500
rng = np.random.RandomState(0)
X = rng.randn(n_samples, 2)
noise = rng.normal(loc=0.0, scale=0.01, size=n_samples)
y = 5 * X[:, 0] + np.sin(10 * np.pi * X[:, 0]) - noise

# Entrenamos dos modelos de HistGradientBoostingRegressor, uno sin restricciones y otro con restricciones
gbdt_no_cst = HistGradientBoostingRegressor().fit(X, y)
gbdt_cst = HistGradientBoostingRegressor(monotonic_cst=[1, 0]).fit(X, y)

# Visualización de las dependencias parciales
disp = PartialDependenceDisplay.from_estimator(
    gbdt_no_cst, X, features=[0], feature_names=["feature 0"],
    line_kw={"linewidth": 4, "label": "Sin restricciones", "color": "tab:blue"}
)

PartialDependenceDisplay.from_estimator(
    gbdt_cst, X, features=[0],
    line_kw={"linewidth": 4, "label": "Con restricciones", "color": "tab:orange"},
    ax=disp.axes_,
)

# Visualización de los datos y ajuste
disp.axes_[0, 0].plot(X[:, 0], y, "o", alpha=0.5, zorder=-1, label="Muestras", color="tab:green")
disp.axes_[0, 0].set_ylim(-3, 3)
disp.axes_[0, 0].set_xlim(-1, 1)
plt.legend()
plt.show()
